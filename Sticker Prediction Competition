{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":85723,"databundleVersionId":10652996,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.359575Z","iopub.execute_input":"2025-01-24T16:31:33.360053Z","iopub.status.idle":"2025-01-24T16:31:33.372820Z","shell.execute_reply.started":"2025-01-24T16:31:33.360019Z","shell.execute_reply":"2025-01-24T16:31:33.371284Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e1/sample_submission.csv\n/kaggle/input/playground-series-s5e1/train.csv\n/kaggle/input/playground-series-s5e1/test.csv\n","output_type":"stream"}],"execution_count":63},{"cell_type":"code","source":"test = pd.read_csv(\"/kaggle/input/playground-series-s5e1/test.csv\")\ntrain = pd.read_csv(\"/kaggle/input/playground-series-s5e1/train.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.374320Z","iopub.execute_input":"2025-01-24T16:31:33.374747Z","iopub.status.idle":"2025-01-24T16:31:33.664937Z","shell.execute_reply.started":"2025-01-24T16:31:33.374690Z","shell.execute_reply":"2025-01-24T16:31:33.663673Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.666693Z","iopub.execute_input":"2025-01-24T16:31:33.667017Z","iopub.status.idle":"2025-01-24T16:31:33.725148Z","shell.execute_reply.started":"2025-01-24T16:31:33.666991Z","shell.execute_reply":"2025-01-24T16:31:33.723774Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 230130 entries, 0 to 230129\nData columns (total 6 columns):\n #   Column    Non-Null Count   Dtype  \n---  ------    --------------   -----  \n 0   id        230130 non-null  int64  \n 1   date      230130 non-null  object \n 2   country   230130 non-null  object \n 3   store     230130 non-null  object \n 4   product   230130 non-null  object \n 5   num_sold  221259 non-null  float64\ndtypes: float64(1), int64(1), object(4)\nmemory usage: 10.5+ MB\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"train = train.dropna(subset=[\"num_sold\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.726872Z","iopub.execute_input":"2025-01-24T16:31:33.727206Z","iopub.status.idle":"2025-01-24T16:31:33.750153Z","shell.execute_reply.started":"2025-01-24T16:31:33.727178Z","shell.execute_reply":"2025-01-24T16:31:33.748984Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"train.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.751377Z","iopub.execute_input":"2025-01-24T16:31:33.751726Z","iopub.status.idle":"2025-01-24T16:31:33.764539Z","shell.execute_reply.started":"2025-01-24T16:31:33.751695Z","shell.execute_reply":"2025-01-24T16:31:33.763415Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"   id        date country              store             product  num_sold\n1   1  2010-01-01  Canada  Discount Stickers              Kaggle     973.0\n2   2  2010-01-01  Canada  Discount Stickers        Kaggle Tiers     906.0\n3   3  2010-01-01  Canada  Discount Stickers            Kerneler     423.0\n4   4  2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode     491.0\n5   5  2010-01-01  Canada  Stickers for Less   Holographic Goose     300.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>country</th>\n      <th>store</th>\n      <th>product</th>\n      <th>num_sold</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2010-01-01</td>\n      <td>Canada</td>\n      <td>Discount Stickers</td>\n      <td>Kaggle</td>\n      <td>973.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2010-01-01</td>\n      <td>Canada</td>\n      <td>Discount Stickers</td>\n      <td>Kaggle Tiers</td>\n      <td>906.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2010-01-01</td>\n      <td>Canada</td>\n      <td>Discount Stickers</td>\n      <td>Kerneler</td>\n      <td>423.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2010-01-01</td>\n      <td>Canada</td>\n      <td>Discount Stickers</td>\n      <td>Kerneler Dark Mode</td>\n      <td>491.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>2010-01-01</td>\n      <td>Canada</td>\n      <td>Stickers for Less</td>\n      <td>Holographic Goose</td>\n      <td>300.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.765702Z","iopub.execute_input":"2025-01-24T16:31:33.766186Z","iopub.status.idle":"2025-01-24T16:31:33.809144Z","shell.execute_reply.started":"2025-01-24T16:31:33.766140Z","shell.execute_reply":"2025-01-24T16:31:33.808130Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"                  id       num_sold\ncount  221259.000000  221259.000000\nmean   115398.848472     752.527382\nstd     66315.365084     690.165445\nmin         1.000000       5.000000\n25%     58160.500000     219.000000\n50%    115552.000000     605.000000\n75%    172688.500000    1114.000000\nmax    230129.000000    5939.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>num_sold</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>221259.000000</td>\n      <td>221259.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>115398.848472</td>\n      <td>752.527382</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>66315.365084</td>\n      <td>690.165445</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>58160.500000</td>\n      <td>219.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>115552.000000</td>\n      <td>605.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>172688.500000</td>\n      <td>1114.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>230129.000000</td>\n      <td>5939.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":68},{"cell_type":"markdown","source":"# **Handling the categorical data**","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\n\n# Initialize OneHotEncoder\nencoder = OneHotEncoder(sparse_output=False)\n\n# Apply OneHotEncoder to the categorical columns\ntrain_encoded_array = encoder.fit_transform(train[[\"country\", \"store\", \"product\"]])\ntest_encoded_array = encoder.transform(test[[\"country\", \"store\", \"product\"]])  \n\n# Convert the encoded data to DataFrames\nencoded_columns = encoder.get_feature_names_out([\"country\", \"store\", \"product\"])\ntrain_encoded_df = pd.DataFrame(train_encoded_array, columns=encoded_columns, index=train.index)  # Match index with train\ntest_encoded_df = pd.DataFrame(test_encoded_array, columns=encoded_columns, index=test.index)  # Match index with test\n\n# Concatenate the original DataFrame with the encoded DataFrame\ntrain_encoded = pd.concat([train[[\"num_sold\"]], train_encoded_df], axis=1)\ntest_encoded = pd.concat([test, test_encoded_df], axis=1)\n\n# Convert Datetime to numerical format (Timestamp)\ntrain_encoded[\"date\"] = pd.to_datetime(train[\"date\"])\ntest_encoded[\"date\"] = pd.to_datetime(test[\"date\"])\n\n# Convert to timestamp (seconds since Unix epoch)\ntrain_encoded[\"Timestamp\"] = train_encoded[\"date\"].astype(int) / 10**9  # Converts to seconds\ntest_encoded[\"Timestamp\"] = test_encoded[\"date\"].astype(int) / 10**9  # Converts to seconds\n\n# Drop the original date column from the train and test DataFrames\ntrain_encoded = train_encoded.drop(\"date\", axis=1)\ntest_encoded = test_encoded.drop(\"date\", axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:33.811760Z","iopub.execute_input":"2025-01-24T16:31:33.812117Z","iopub.status.idle":"2025-01-24T16:31:34.183906Z","shell.execute_reply.started":"2025-01-24T16:31:33.812086Z","shell.execute_reply":"2025-01-24T16:31:34.182694Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"train_encoded","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:34.185421Z","iopub.execute_input":"2025-01-24T16:31:34.185768Z","iopub.status.idle":"2025-01-24T16:31:34.216250Z","shell.execute_reply.started":"2025-01-24T16:31:34.185739Z","shell.execute_reply":"2025-01-24T16:31:34.215088Z"}},"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"        num_sold  country_Canada  country_Finland  country_Italy  \\\n1          973.0             1.0              0.0            0.0   \n2          906.0             1.0              0.0            0.0   \n3          423.0             1.0              0.0            0.0   \n4          491.0             1.0              0.0            0.0   \n5          300.0             1.0              0.0            0.0   \n...          ...             ...              ...            ...   \n230125     466.0             0.0              0.0            0.0   \n230126    2907.0             0.0              0.0            0.0   \n230127    2299.0             0.0              0.0            0.0   \n230128    1242.0             0.0              0.0            0.0   \n230129    1622.0             0.0              0.0            0.0   \n\n        country_Kenya  country_Norway  country_Singapore  \\\n1                 0.0             0.0                0.0   \n2                 0.0             0.0                0.0   \n3                 0.0             0.0                0.0   \n4                 0.0             0.0                0.0   \n5                 0.0             0.0                0.0   \n...               ...             ...                ...   \n230125            0.0             0.0                1.0   \n230126            0.0             0.0                1.0   \n230127            0.0             0.0                1.0   \n230128            0.0             0.0                1.0   \n230129            0.0             0.0                1.0   \n\n        store_Discount Stickers  store_Premium Sticker Mart  \\\n1                           1.0                         0.0   \n2                           1.0                         0.0   \n3                           1.0                         0.0   \n4                           1.0                         0.0   \n5                           0.0                         0.0   \n...                         ...                         ...   \n230125                      0.0                         1.0   \n230126                      0.0                         1.0   \n230127                      0.0                         1.0   \n230128                      0.0                         1.0   \n230129                      0.0                         1.0   \n\n        store_Stickers for Less  product_Holographic Goose  product_Kaggle  \\\n1                           0.0                        0.0             1.0   \n2                           0.0                        0.0             0.0   \n3                           0.0                        0.0             0.0   \n4                           0.0                        0.0             0.0   \n5                           1.0                        1.0             0.0   \n...                         ...                        ...             ...   \n230125                      0.0                        1.0             0.0   \n230126                      0.0                        0.0             1.0   \n230127                      0.0                        0.0             0.0   \n230128                      0.0                        0.0             0.0   \n230129                      0.0                        0.0             0.0   \n\n        product_Kaggle Tiers  product_Kerneler  product_Kerneler Dark Mode  \\\n1                        0.0               0.0                         0.0   \n2                        1.0               0.0                         0.0   \n3                        0.0               1.0                         0.0   \n4                        0.0               0.0                         1.0   \n5                        0.0               0.0                         0.0   \n...                      ...               ...                         ...   \n230125                   0.0               0.0                         0.0   \n230126                   0.0               0.0                         0.0   \n230127                   1.0               0.0                         0.0   \n230128                   0.0               1.0                         0.0   \n230129                   0.0               0.0                         1.0   \n\n           Timestamp  \n1       1.262304e+09  \n2       1.262304e+09  \n3       1.262304e+09  \n4       1.262304e+09  \n5       1.262304e+09  \n...              ...  \n230125  1.483142e+09  \n230126  1.483142e+09  \n230127  1.483142e+09  \n230128  1.483142e+09  \n230129  1.483142e+09  \n\n[221259 rows x 16 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_sold</th>\n      <th>country_Canada</th>\n      <th>country_Finland</th>\n      <th>country_Italy</th>\n      <th>country_Kenya</th>\n      <th>country_Norway</th>\n      <th>country_Singapore</th>\n      <th>store_Discount Stickers</th>\n      <th>store_Premium Sticker Mart</th>\n      <th>store_Stickers for Less</th>\n      <th>product_Holographic Goose</th>\n      <th>product_Kaggle</th>\n      <th>product_Kaggle Tiers</th>\n      <th>product_Kerneler</th>\n      <th>product_Kerneler Dark Mode</th>\n      <th>Timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>973.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.262304e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>906.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.262304e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>423.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.262304e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>491.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.262304e+09</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>300.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.262304e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>230125</th>\n      <td>466.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.483142e+09</td>\n    </tr>\n    <tr>\n      <th>230126</th>\n      <td>2907.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.483142e+09</td>\n    </tr>\n    <tr>\n      <th>230127</th>\n      <td>2299.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.483142e+09</td>\n    </tr>\n    <tr>\n      <th>230128</th>\n      <td>1242.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.483142e+09</td>\n    </tr>\n    <tr>\n      <th>230129</th>\n      <td>1622.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.483142e+09</td>\n    </tr>\n  </tbody>\n</table>\n<p>221259 rows × 16 columns</p>\n</div>"},"metadata":{}}],"execution_count":70},{"cell_type":"code","source":"X_train = train_encoded.drop(columns=[\"num_sold\", \"Timestamp\"])\ny_train = train_encoded[\"num_sold\"]\n\n# Transform y_train to avoid negative predictions\ny_train_log = np.log1p(y_train)\n\nX_test = test_encoded.drop(columns=[\"country\", \"id\", \"product\", \"store\", \"Timestamp\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:34.217622Z","iopub.execute_input":"2025-01-24T16:31:34.217983Z","iopub.status.idle":"2025-01-24T16:31:34.245877Z","shell.execute_reply.started":"2025-01-24T16:31:34.217949Z","shell.execute_reply":"2025-01-24T16:31:34.244518Z"}},"outputs":[],"execution_count":71},{"cell_type":"markdown","source":"# **Creating the Models**","metadata":{}},{"cell_type":"markdown","source":"**Linear Model**","metadata":{}},{"cell_type":"code","source":"\nfrom sklearn import linear_model\n\n\nlinear_reg = linear_model.LinearRegression()\nlinear_reg.fit(X_train,y_train_log)\ny_pred = np.expm1(linear_reg.predict(X_test))\n\n# Create a DataFrame for the submission\nsubmission_df_lr = pd.DataFrame({\n    'id': test_encoded['id'],  # Use 'id' from the test dataset\n    'num_sold': y_pred  # Predictions\n})\n\n# Save the DataFrame to a CSV file\nsubmission_df_lr.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:34.247051Z","iopub.execute_input":"2025-01-24T16:31:34.247434Z","iopub.status.idle":"2025-01-24T16:31:34.589116Z","shell.execute_reply.started":"2025-01-24T16:31:34.247377Z","shell.execute_reply":"2025-01-24T16:31:34.587921Z"}},"outputs":[],"execution_count":72},{"cell_type":"markdown","source":"**Decision Tree**","metadata":{}},{"cell_type":"code","source":"\nfrom sklearn import tree\n\n#Best parameters found with GridSearch:  {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}\ndtree = tree.DecisionTreeClassifier(\n    max_depth=5,\n    max_features=\"log2\",\n    min_samples_leaf=2,\n    min_samples_split=2,\n    random_state=9\n)\ndtree = dtree.fit(X_train,y_train)\ny_pred = dtree.predict(X_test)\n\n# Create a DataFrame for the submission\nsubmission_df_tree = pd.DataFrame({\n    'id': test_encoded['id'],  # Use 'id' from the test dataset\n    'num_sold': y_pred  # Predictions\n})\n\n# Save the DataFrame to a CSV file\nsubmission_df_tree.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:34.590112Z","iopub.execute_input":"2025-01-24T16:31:34.590437Z","iopub.status.idle":"2025-01-24T16:31:36.232801Z","shell.execute_reply.started":"2025-01-24T16:31:34.590398Z","shell.execute_reply":"2025-01-24T16:31:36.231421Z"}},"outputs":[],"execution_count":73},{"cell_type":"markdown","source":"**Decision Tree with Gridsearch**","metadata":{}},{"cell_type":"code","source":"'''\nfrom sklearn.model_selection import GridSearchCV\n\n# Hyperparameter grid to search\nparam_grid = {\n    'max_depth': [5, 15, 20],  # Depth of the tree\n    'min_samples_split': [2, 10],  # Minimum samples required to split a node\n    'min_samples_leaf': [1, 2, 10],  # Minimum samples required to be at a leaf node\n    'max_features': ['auto', 'sqrt', 'log2']  # Number of features to consider\n}\n\n# Initialize the Decision Tree model\ndtree = tree.DecisionTreeClassifier()\n\n# Initialize GridSearchCV with 5-fold cross-validation\ngrid_search = GridSearchCV(estimator=dtree, param_grid=param_grid, \n                           cv=5, scoring='accuracy', n_jobs=-1, verbose=1)\n\n# Fit GridSearchCV to the training data\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters from GridSearchCV\nprint(\"Best parameters found: \", grid_search.best_params_)\n\n# Get the best model\nbest_model = grid_search.best_estimator_\n\n# Make predictions using the best model\ny_pred = best_model.predict(X_test)\n\n# Create a DataFrame for the submission\nsubmission_df_tree2 = pd.DataFrame({\n    'id': test_encoded['id'],  # Use 'id' from the test dataset\n    'num_sold': y_pred  # Predictions\n})\n\n# Save the DataFrame to a CSV file\nsubmission_df_tree2.to_csv('submission.csv', index=False)\n\n#Best parameters found:  {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}\n'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:36.233637Z","iopub.execute_input":"2025-01-24T16:31:36.233963Z","iopub.status.idle":"2025-01-24T16:31:36.241649Z","shell.execute_reply.started":"2025-01-24T16:31:36.233935Z","shell.execute_reply":"2025-01-24T16:31:36.240517Z"}},"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"'\\nfrom sklearn.model_selection import GridSearchCV\\n\\n# Hyperparameter grid to search\\nparam_grid = {\\n    \\'max_depth\\': [5, 15, 20],  # Depth of the tree\\n    \\'min_samples_split\\': [2, 10],  # Minimum samples required to split a node\\n    \\'min_samples_leaf\\': [1, 2, 10],  # Minimum samples required to be at a leaf node\\n    \\'max_features\\': [\\'auto\\', \\'sqrt\\', \\'log2\\']  # Number of features to consider\\n}\\n\\n# Initialize the Decision Tree model\\ndtree = tree.DecisionTreeClassifier()\\n\\n# Initialize GridSearchCV with 5-fold cross-validation\\ngrid_search = GridSearchCV(estimator=dtree, param_grid=param_grid, \\n                           cv=5, scoring=\\'accuracy\\', n_jobs=-1, verbose=1)\\n\\n# Fit GridSearchCV to the training data\\ngrid_search.fit(X_train, y_train)\\n\\n# Get the best parameters from GridSearchCV\\nprint(\"Best parameters found: \", grid_search.best_params_)\\n\\n# Get the best model\\nbest_model = grid_search.best_estimator_\\n\\n# Make predictions using the best model\\ny_pred = best_model.predict(X_test)\\n\\n# Create a DataFrame for the submission\\nsubmission_df_tree2 = pd.DataFrame({\\n    \\'id\\': test_encoded[\\'id\\'],  # Use \\'id\\' from the test dataset\\n    \\'num_sold\\': y_pred  # Predictions\\n})\\n\\n# Save the DataFrame to a CSV file\\nsubmission_df_tree2.to_csv(\\'submission.csv\\', index=False)\\n\\n#Best parameters found:  {\\'max_depth\\': 5, \\'max_features\\': \\'log2\\', \\'min_samples_leaf\\': 2, \\'min_samples_split\\': 2}\\n'"},"metadata":{}}],"execution_count":74},{"cell_type":"markdown","source":"**Random Forest**","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(\n    random_state=9\n)\nrf = rf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n\n# Create a DataFrame for the submission\nsubmission_df_rf = pd.DataFrame({\n    'id': test_encoded['id'],  # Use 'id' from the test dataset\n    'num_sold': y_pred  # Predictions\n})\n\n# Save the DataFrame to a CSV file\nsubmission_df_rf.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-24T16:31:36.243053Z","iopub.execute_input":"2025-01-24T16:31:36.243644Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**XGBoost**","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBRegressor\n\n# Initialize the XGBoost regressor\nxgb = XGBRegressor(\n    max_depth=5,           # Maximum depth of a tree\n    reg_lambda=1,          # L2 Regularization\n    learning_rate=0.1,     # Step size shrinkage\n    n_estimators=100,      # Number of boosting rounds (trees)\n    objective=\"reg:squarederror\",  # Objective function for regression\n    random_state=9\n)\n\n# Fit the model\nxgb = xgb.fit(X_train, y_train_log)\n\n# Predict the target for the test set\ny_pred = np.expm1(xgb.predict(X_test))\n\n\n# Create a DataFrame for the submission\nsubmission_df_xgb = pd.DataFrame({\n    'id': test_encoded['id'],  # Use 'id' from the test dataset\n    'num_sold': y_pred         # Predictions\n})\n\n# Save the DataFrame to a CSV file\nsubmission_df_xgb.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Compare results**","metadata":{}},{"cell_type":"code","source":"# Merge the submission DataFrames on the 'id' column\ncomparison_df = submission_df_lr.merge(\n    submission_df_tree, on=\"id\", suffixes=(\"_lr\", \"_tree\")\n).merge(\n    submission_df_rf, on=\"id\"\n).merge(\n    submission_df_xgb, on=\"id\", suffixes=(\"_rf\", \"_xgb\")\n)\n\n# Rename columns for clarity\ncomparison_df.columns = [\"id\", \"num_sold_lr\", \"num_sold_tree\", \"num_sold_rf\", \"num_sold_xgb\"]\n\n# Display the first few rows for comparison\nprint(comparison_df.head())\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission_df_tree.describe()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission_df_xgb.describe()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}